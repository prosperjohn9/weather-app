{"version":3,"file":"main.js","mappings":"MAAAA,SACGC,eAAe,eACfC,iBAAiB,UAAU,SAAUC,GACpCA,EAAMC,iBACN,MAAMC,EAAWL,SAASC,eAAe,iBAAiBK,MAC1DC,GAAe,GA0DnBC,eAAgCH,GAC9B,MACMI,EAAM,qFAA+DJ,4BAE3E,IACE,MAAMK,QAAiBC,MAAMF,GAC7B,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAElDC,QAA2BL,EAASM,OACpCC,EAAmBF,EACrB,CAAE,MAAOG,GACPC,QAAQD,MAAM,gCAAiCA,GAC/ClB,SAASC,eAAe,kBAAkBmB,UACxC,gDACJ,CACF,CAzEIC,CAAiBhB,EACnB,IAEFL,SAASC,eAAe,eAAeC,iBAAiB,SAAS,WAC3DoB,UAAUC,aACZhB,GAAe,GACfe,UAAUC,YAAYC,oBACpB,SAAUC,IA0BhBjB,eAAwCkB,EAAKC,GAC3C,MACMlB,EAAM,qFAA+DiB,KAAOC,4BAElF,IACE,MAAMjB,QAAiBC,MAAMF,GAC7B,IAAKC,EAASE,GACZ,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAElDC,QAA2BL,EAASM,OACpCC,EAAmBF,EACrB,CAAE,MAAOG,GACPC,QAAQD,MAAM,gCAAiCA,GAC/ClB,SAASC,eAAe,kBAAkBmB,UACxC,gDACJ,CAAE,QACAb,GAAe,EACjB,CACF,CAzCQqB,CAFYH,EAASI,OAAOC,SAChBL,EAASI,OAAOE,UAE9B,IACA,SAAUb,GACRX,GAAe,GACfyB,MAAM,6BAA+Bd,EAAMe,QAC7C,KAGFD,MAAM,gDAEV,IAEA,IAAIjB,EAAqB,KACrBmB,GAAY,EA8BhB,SAAS3B,EAAe4B,GACtBnC,SAASC,eAAe,WAAWmC,MAAMC,QAAUF,EAAO,QAAU,MACtE,CAoBA,SAASlB,EAAmBqB,GAC1B/B,GAAe,GACf,MAAMgC,EAAWL,EAAY,KAAO,KAC9BM,EAAcN,EAAYI,EAAKG,QAAQC,OAASJ,EAAKG,QAAQE,OAC7DC,EAAUV,EACZI,EAAKO,SAASC,YAAY,GAAGC,IAAIC,UACjCV,EAAKO,SAASC,YAAY,GAAGC,IAAIE,UAC/BC,EAAUhB,EACZI,EAAKO,SAASC,YAAY,GAAGC,IAAII,UACjCb,EAAKO,SAASC,YAAY,GAAGC,IAAIK,UACdpD,SAASC,eAAe,kBAChCmB,UAAY,mEACmCkB,EAAKjC,SAASgD,2EAChBf,EAAKjC,SAASiD,8EACbhB,EAAKjC,SAASkD,iFACZjB,EAAKjC,SAASmD,qFACZhB,KAAeD,2EACjBD,EAAKG,QAAQgB,UAAUC,kEACnCpB,EAAKG,QAAQgB,UAAUE,oGACVrB,EAAKG,QAAQmB,qFACftB,EAAKG,QAAQoB,kFACbjB,KAAWL,0EACXW,KAAWX,gFACLD,EAAKO,SAASC,YAAY,GAAGC,IAAIe,oGACjCxB,EAAKO,SAASC,YAAY,GAAGC,IAAIgB,6FACxCzB,EAAKO,SAASC,YAAY,GAAGkB,MAAMC,8EACpC3B,EAAKO,SAASC,YAAY,GAAGkB,MAAME,oBAEjG,CA7EAlE,SAASC,eAAe,cAAcC,iBAAiB,SAAS,WAC9DgC,GAAaA,EACTnB,GACFE,EAAmBF,EAEvB,G","sources":["webpack://weather-app/./src/index.js"],"sourcesContent":["document\n  .getElementById('weatherForm')\n  .addEventListener('submit', function (event) {\n    event.preventDefault();\n    const location = document.getElementById('locationInput').value;\n    displayLoading(true);\n    fetchWeatherData(location);\n  });\n\ndocument.getElementById('useLocation').addEventListener('click', function () {\n  if (navigator.geolocation) {\n    displayLoading(true);\n    navigator.geolocation.getCurrentPosition(\n      function (position) {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        fetchWeatherDataByCoords(lat, lon);\n      },\n      function (error) {\n        displayLoading(false);\n        alert('Error obtaining location: ' + error.message);\n      }\n    );\n  } else {\n    alert('Geolocation is not supported by your browser.');\n  }\n});\n\nlet currentWeatherData = null; // Store the current weather data globally\nlet isCelsius = true; // Toggle state for Celsius/Fahrenheit\n\n// Correct the duplicate toggleTemp event listener\ndocument.getElementById('toggleTemp').addEventListener('click', function () {\n  isCelsius = !isCelsius;\n  if (currentWeatherData) {\n    displayWeatherData(currentWeatherData); // Re-display data with new temperature unit\n  }\n});\n\nasync function fetchWeatherDataByCoords(lat, lon) {\n  const apiKey = '9fc12ff726af487cb89114223240904';\n  const url = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${lat},${lon}&days=1&aqi=no&alerts=no`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    currentWeatherData = await response.json();\n    displayWeatherData(currentWeatherData);\n  } catch (error) {\n    console.error('Failed to fetch weather data:', error);\n    document.getElementById('weatherDisplay').innerHTML =\n      'Failed to load weather data. Please try again.';\n  } finally {\n    displayLoading(false);\n  }\n}\n\nfunction displayLoading(show) {\n  document.getElementById('loading').style.display = show ? 'block' : 'none';\n}\n\nasync function fetchWeatherData(location) {\n  const apiKey = '9fc12ff726af487cb89114223240904';\n  const url = `https://api.weatherapi.com/v1/forecast.json?key=${apiKey}&q=${location}&days=1&aqi=no&alerts=no`;\n\n  try {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    currentWeatherData = await response.json(); // Store fetched data globally\n    displayWeatherData(currentWeatherData);\n  } catch (error) {\n    console.error('Failed to fetch weather data:', error);\n    document.getElementById('weatherDisplay').innerHTML =\n      'Failed to load weather data. Please try again.';\n  }\n}\n\nfunction displayWeatherData(data) {\n  displayLoading(false);\n  const tempUnit = isCelsius ? '°C' : '°F';\n  const currentTemp = isCelsius ? data.current.temp_c : data.current.temp_f;\n  const maxTemp = isCelsius\n    ? data.forecast.forecastday[0].day.maxtemp_c\n    : data.forecast.forecastday[0].day.maxtemp_f;\n  const minTemp = isCelsius\n    ? data.forecast.forecastday[0].day.mintemp_c\n    : data.forecast.forecastday[0].day.mintemp_f;\n  const weatherDisplay = document.getElementById('weatherDisplay');\n  weatherDisplay.innerHTML = `\n        <div class=\"weatherDetail\"><strong>Location:</strong> ${data.location.name}</div>\n        <div class=\"weatherDetail\"><strong>Region:</strong> ${data.location.region}</div>\n        <div class=\"weatherDetail\"><strong>Country:</strong> ${data.location.country}</div>\n        <div class=\"weatherDetail\"><strong>Date/Time:</strong> ${data.location.localtime}</div>\n        <div class=\"weatherDetail\"><strong>Temperature:</strong> ${currentTemp} ${tempUnit}</div>\n        <div class=\"weatherDetail\"><strong>Condition:</strong> ${data.current.condition.text}</div>\n        <div class=\"weatherDetail\"><img src=\"https:${data.current.condition.icon}\" alt=\"Weather Icon\"></div>\n        <div class=\"weatherDetail\"><strong>Wind Speed:</strong> ${data.current.wind_kph} kph</div>\n        <div class=\"weatherDetail\"><strong>Humidity:</strong> ${data.current.humidity}%</div>\n        <div class=\"weatherDetail\"><strong>Max Temp:</strong> ${maxTemp} ${tempUnit}</div>\n        <div class=\"weatherDetail\"><strong>Min Temp:</strong> ${minTemp} ${tempUnit}</div>\n        <div class=\"weatherDetail\"><strong>Chance of Rain:</strong> ${data.forecast.forecastday[0].day.daily_chance_of_rain}%</div>\n        <div class=\"weatherDetail\"><strong>Chance of Snow:</strong> ${data.forecast.forecastday[0].day.daily_chance_of_snow}%</div>\n        <div class=\"weatherDetail\"><strong>Sunrise:</strong> ${data.forecast.forecastday[0].astro.sunrise}</div>\n        <div class=\"weatherDetail\"><strong>Sunset:</strong> ${data.forecast.forecastday[0].astro.sunset}</div>\n    `;\n}\n"],"names":["document","getElementById","addEventListener","event","preventDefault","location","value","displayLoading","async","url","response","fetch","ok","Error","status","currentWeatherData","json","displayWeatherData","error","console","innerHTML","fetchWeatherData","navigator","geolocation","getCurrentPosition","position","lat","lon","fetchWeatherDataByCoords","coords","latitude","longitude","alert","message","isCelsius","show","style","display","data","tempUnit","currentTemp","current","temp_c","temp_f","maxTemp","forecast","forecastday","day","maxtemp_c","maxtemp_f","minTemp","mintemp_c","mintemp_f","name","region","country","localtime","condition","text","icon","wind_kph","humidity","daily_chance_of_rain","daily_chance_of_snow","astro","sunrise","sunset"],"sourceRoot":""}